"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/airline-data-converter.ts":
/*!*******************************************!*\
  !*** ./src/lib/airline-data-converter.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToAirlineData: () => (/* binding */ convertToAirlineData)\n/* harmony export */ });\n/* harmony import */ var _amex_partners__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./amex-partners */ \"(app-pages-browser)/./src/lib/amex-partners.ts\");\n\n/**\n * Convert existing Amex partner lookup results to the new Airline schema format\n */ function convertToAirlineData(airlineName) {\n    if (!(airlineName === null || airlineName === void 0 ? void 0 : airlineName.trim())) return null;\n    const amexResult = (0,_amex_partners__WEBPACK_IMPORTED_MODULE_0__.lookupAmexPartner)(airlineName);\n    if (!amexResult.isBookable || amexResult.partnerPrograms.length === 0) {\n        return null;\n    }\n    // Determine airline category based on name patterns\n    const getAirlineCategory = (name)=>{\n        const majorUS = [\n            'American Airlines',\n            'Delta Air Lines',\n            'United Airlines',\n            'Southwest Airlines',\n            'JetBlue Airways',\n            'Alaska Airlines'\n        ];\n        const cargo = [\n            'FedEx',\n            'UPS Airlines',\n            'Atlas Air',\n            'Kalitta Air'\n        ];\n        const charter = [\n            'NetJets',\n            'Flexjet',\n            'VistaJet'\n        ];\n        if (majorUS.includes(name)) return \"Major US\";\n        if (cargo.some((c)=>name.includes(c))) return \"Cargo\";\n        if (charter.some((c)=>name.includes(c))) return \"Charter\";\n        // Default to International for most airlines\n        return \"International\";\n    };\n    // Get IATA code mapping (basic implementation)\n    const getIataCode = (name)=>{\n        const iataMap = {\n            'American Airlines': 'AA',\n            'Delta Air Lines': 'DL',\n            'United Airlines': 'UA',\n            'British Airways': 'BA',\n            'Air France': 'AF',\n            'KLM Royal Dutch Airlines': 'KL',\n            'Lufthansa': 'LH',\n            'Singapore Airlines': 'SQ',\n            'Cathay Pacific': 'CX',\n            'Emirates': 'EK',\n            'Qatar Airways': 'QR',\n            'All Nippon Airways': 'NH',\n            'Japan Airlines': 'JL',\n            'Air Canada': 'AC',\n            'Virgin Atlantic': 'VS',\n            'Turkish Airlines': 'TK',\n            'Swiss International Air Lines': 'LX',\n            'Austrian Airlines': 'OS',\n            'Brussels Airlines': 'SN',\n            'Scandinavian Airlines': 'SK',\n            'Finnair': 'AY',\n            'Iberia': 'IB',\n            'Aer Lingus': 'EI',\n            'TAP Air Portugal': 'TP',\n            'LOT Polish Airlines': 'LO',\n            'Czech Airlines': 'OK',\n            'Croatia Airlines': 'OU',\n            'Air China': 'CA',\n            'China Eastern Airlines': 'MU',\n            'China Southern Airlines': 'CZ',\n            'Korean Air': 'KE',\n            'Asiana Airlines': 'OZ',\n            'Thai Airways': 'TG',\n            'Malaysia Airlines': 'MH',\n            'Garuda Indonesia': 'GA',\n            'Philippine Airlines': 'PR',\n            'Vietnam Airlines': 'VN',\n            'Air India': 'AI',\n            'Ethiopian Airlines': 'ET',\n            'Kenya Airways': 'KQ',\n            'South African Airways': 'SA',\n            'EgyptAir': 'MS',\n            'Royal Air Maroc': 'AT',\n            'Royal Jordanian': 'RJ',\n            'Middle East Airlines': 'ME',\n            'Saudia': 'SV',\n            'Etihad Airways': 'EY',\n            'Oman Air': 'WY',\n            'Kuwait Airways': 'KU',\n            'JetBlue Airways': 'B6',\n            'Alaska Airlines': 'AS',\n            'Hawaiian Airlines': 'HA',\n            'Southwest Airlines': 'WN',\n            'Frontier Airlines': 'F9',\n            'Spirit Airlines': 'NK',\n            'Allegiant Air': 'G4',\n            'Sun Country Airlines': 'SY',\n            'Qantas': 'QF',\n            'Virgin Australia': 'VA',\n            'Air New Zealand': 'NZ',\n            'Avianca': 'AV',\n            'LATAM Airlines': 'LA',\n            'Copa Airlines': 'CM',\n            'Aeromexico': 'AM',\n            'WestJet': 'WS'\n        };\n        return iataMap[name];\n    };\n    // Find the preferred partner (prioritize Direct > Alliance > Bilateral)\n    const sortedPartners = [\n        ...amexResult.partnerPrograms\n    ].sort((a, b)=>{\n        const priority = {\n            'Direct': 0,\n            'Alliance': 1,\n            'Bilateral': 2\n        };\n        return priority[a.relationship] - priority[b.relationship];\n    });\n    const preferredPartner = sortedPartners[0];\n    const isDirectPartner = preferredPartner.relationship === 'Direct';\n    // Generate how-to-book steps based on the partner type\n    const generateBookingSteps = (partnerName, relationship, airlineName)=>{\n        const baseSteps = [\n            \"Transfer Amex points to \".concat(partnerName, \" at \").concat(preferredPartner.transferRatio, \" ratio\"),\n            \"Wait for transfer to complete (\".concat(preferredPartner.transferTime, \")\"),\n            \"Log into your \".concat(partnerName, \" account\")\n        ];\n        if (relationship === 'Direct') {\n            return [\n                ...baseSteps,\n                \"Search for \".concat(airlineName, \" flights on the \").concat(partnerName, \" website\"),\n                \"Book using points and pay any taxes/fees with cash\"\n            ];\n        } else if (relationship === 'Alliance') {\n            return [\n                ...baseSteps,\n                \"Search for \".concat(airlineName, \" flights (alliance partner) on the \").concat(partnerName, \" website\"),\n                \"Book the award ticket using points\",\n                \"Pay taxes and fees with cash (may be higher for partner awards)\"\n            ];\n        } else {\n            return [\n                ...baseSteps,\n                \"Search for \".concat(airlineName, \" flights on the \").concat(partnerName, \" website\"),\n                \"Look for partner award availability (may be limited)\",\n                \"Book using points and pay taxes/fees with cash\"\n            ];\n        }\n    };\n    // Generate notes based on common patterns\n    const generateNotes = (partnerName, relationship)=>{\n        const notes = [];\n        if (relationship === 'Alliance') {\n            notes.push(\"Alliance partner bookings may have limited award availability\");\n            notes.push(\"Expect higher taxes and fees compared to direct partner bookings\");\n        }\n        if (relationship === 'Bilateral') {\n            notes.push(\"Bilateral partnership may have restricted routes and availability\");\n        }\n        if (partnerName.includes('British Airways')) {\n            notes.push(\"British Airways uses distance-based pricing - excellent for short flights\");\n            notes.push(\"Low taxes and fees on domestic US flights\");\n        }\n        if (partnerName.includes('Air France') || partnerName.includes('KLM')) {\n            notes.push(\"Flying Blue has dynamic pricing - book early for better rates\");\n        }\n        if (partnerName.includes('Singapore Airlines')) {\n            notes.push(\"KrisFlyer has excellent premium cabin availability\");\n        }\n        if (notes.length === 0) {\n            notes.push(\"Book well in advance for better award availability\");\n        }\n        return notes;\n    };\n    const bookableVia = amexResult.partnerPrograms.map((p)=>p.partnerName);\n    const partnerDetails = amexResult.partnerPrograms.map((p)=>({\n            name: p.partnerName,\n            relationship: p.relationship,\n            transferRatio: p.transferRatio,\n            transferTime: p.transferTime\n        }));\n    const notes = generateNotes(preferredPartner.partnerName, preferredPartner.relationship);\n    // Generate recommendation reasons based on partner characteristics\n    const generateRecommendationReasons = (partnerName, relationship)=>{\n        const reasons = [];\n        if (relationship === 'Direct') {\n            reasons.push(\"Direct transfer partner with guaranteed availability\");\n        }\n        // British Airways Executive Club\n        if (partnerName.includes('British Airways')) {\n            reasons.push(\"Lower taxes than other Avios programs for short-haul flights\");\n            reasons.push(\"Distance-based pricing excellent for domestic US routes\");\n        }\n        // Air France-KLM Flying Blue\n        if (partnerName.includes('Air France') || partnerName.includes('KLM')) {\n            reasons.push(\"Good award availability to Europe and Africa\");\n            reasons.push(\"Competitive pricing on mid-haul routes\");\n        }\n        // Singapore Airlines KrisFlyer\n        if (partnerName.includes('Singapore Airlines')) {\n            reasons.push(\"Excellent premium cabin availability\");\n            reasons.push(\"Strong partner network in Asia-Pacific\");\n        }\n        // Cathay Pacific Asia Miles\n        if (partnerName.includes('Cathay Pacific')) {\n            reasons.push(\"Good availability to Asia and Australia\");\n            reasons.push(\"Competitive award pricing on long-haul routes\");\n        }\n        // Delta SkyMiles\n        if (partnerName.includes('Delta')) {\n            reasons.push(\"Extensive domestic US network coverage\");\n            reasons.push(\"Good SkyTeam partner availability\");\n        }\n        // American Airlines AAdvantage (if it were a partner)\n        if (partnerName.includes('American Airlines')) {\n            reasons.push(\"Largest domestic US network\");\n            reasons.push(\"Strong Oneworld alliance coverage\");\n        }\n        // Air Canada Aeroplan\n        if (partnerName.includes('Air Canada')) {\n            reasons.push(\"Excellent Star Alliance award availability\");\n            reasons.push(\"Good pricing for North America routes\");\n        }\n        // All Nippon Airways Mileage Club\n        if (partnerName.includes('All Nippon Airways') || partnerName.includes('ANA')) {\n            reasons.push(\"Best availability for Japan and Asia routes\");\n            reasons.push(\"Competitive Star Alliance award pricing\");\n        }\n        // Avianca LifeMiles\n        if (partnerName.includes('Avianca')) {\n            reasons.push(\"No fuel surcharges on most Star Alliance partners\");\n            reasons.push(\"Good availability for South America routes\");\n        }\n        // Virgin Atlantic Flying Club\n        if (partnerName.includes('Virgin Atlantic')) {\n            reasons.push(\"Competitive pricing to UK and Europe\");\n            reasons.push(\"Good Delta partnership for US routes\");\n        }\n        // Emirates Skywards\n        if (partnerName.includes('Emirates')) {\n            reasons.push(\"Excellent Middle East and Asia connectivity\");\n            reasons.push(\"Premium cabin availability on Emirates flights\");\n        }\n        // Etihad Guest\n        if (partnerName.includes('Etihad')) {\n            reasons.push(\"Good Middle East hub connectivity\");\n            reasons.push(\"Competitive pricing on select routes\");\n        }\n        // JetBlue TrueBlue\n        if (partnerName.includes('JetBlue')) {\n            reasons.push(\"Strong US domestic network\");\n            reasons.push(\"Good value for Caribbean routes\");\n        }\n        // Hawaiian Airlines HawaiianMiles\n        if (partnerName.includes('Hawaiian')) {\n            reasons.push(\"Best option for Hawaii routes\");\n            reasons.push(\"Good inter-island flight availability\");\n        }\n        // Qantas Frequent Flyer\n        if (partnerName.includes('Qantas')) {\n            reasons.push(\"Excellent Australia and Pacific coverage\");\n            reasons.push(\"Strong Oneworld partner network\");\n        }\n        // Iberia Plus\n        if (partnerName.includes('Iberia')) {\n            reasons.push(\"Good availability to Spain and Latin America\");\n            reasons.push(\"Competitive Oneworld partner pricing\");\n        }\n        // Aer Lingus AerClub\n        if (partnerName.includes('Aer Lingus')) {\n            reasons.push(\"Good value for transatlantic routes\");\n            reasons.push(\"Competitive European network access\");\n        }\n        // Aeromexico Club Premier\n        if (partnerName.includes('Aeromexico')) {\n            reasons.push(\"Best option for Mexico routes\");\n            reasons.push(\"Good SkyTeam partner availability\");\n        }\n        // Add general alliance-based reasons if no specific partner reasons\n        if (reasons.length === 0) {\n            if (relationship === 'Alliance') {\n                reasons.push(\"Access to extensive alliance partner network\");\n                reasons.push(\"Generally good award availability\");\n            } else if (relationship === 'Bilateral') {\n                reasons.push(\"Specialized partnership with unique route access\");\n                reasons.push(\"Often competitive pricing on specific routes\");\n            }\n        }\n        return reasons;\n    };\n    const recommendationReasons = generateRecommendationReasons(preferredPartner.partnerName, preferredPartner.relationship);\n    return {\n        name: airlineName,\n        iataCode: getIataCode(airlineName),\n        category: getAirlineCategory(airlineName),\n        isDirectPartner,\n        isAllianceBookable: amexResult.partnerPrograms.some((p)=>p.relationship === 'Alliance'),\n        isBilateralBookable: amexResult.partnerPrograms.some((p)=>p.relationship === 'Bilateral'),\n        bookableVia,\n        partnerDetails,\n        preferredPartner: preferredPartner.partnerName,\n        transferRatio: preferredPartner.transferRatio,\n        transferTime: preferredPartner.transferTime,\n        howToBookSteps: generateBookingSteps(preferredPartner.partnerName, preferredPartner.relationship, airlineName),\n        notes,\n        recommendationReasons: recommendationReasons.length > 0 ? recommendationReasons : undefined\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/airline-data-converter.ts\n"));

/***/ })

});