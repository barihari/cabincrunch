"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./src/lib/airline-data-converter.ts":
/*!*******************************************!*\
  !*** ./src/lib/airline-data-converter.ts ***!
  \*******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertToAirlineData: () => (/* binding */ convertToAirlineData)\n/* harmony export */ });\n/* harmony import */ var _amex_partners__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./amex-partners */ \"(app-pages-browser)/./src/lib/amex-partners.ts\");\n\n/**\n * Convert existing Amex partner lookup results to the new Airline schema format\n */ function convertToAirlineData(airlineName) {\n    if (!(airlineName === null || airlineName === void 0 ? void 0 : airlineName.trim())) return null;\n    const amexResult = (0,_amex_partners__WEBPACK_IMPORTED_MODULE_0__.lookupAmexPartner)(airlineName);\n    if (!amexResult.isBookable || amexResult.partnerPrograms.length === 0) {\n        return null;\n    }\n    // Determine airline category based on name patterns\n    const getAirlineCategory = (name)=>{\n        const majorUS = [\n            'American Airlines',\n            'Delta Air Lines',\n            'United Airlines',\n            'Southwest Airlines',\n            'JetBlue Airways',\n            'Alaska Airlines'\n        ];\n        const cargo = [\n            'FedEx',\n            'UPS Airlines',\n            'Atlas Air',\n            'Kalitta Air'\n        ];\n        const charter = [\n            'NetJets',\n            'Flexjet',\n            'VistaJet'\n        ];\n        if (majorUS.includes(name)) return \"Major US\";\n        if (cargo.some((c)=>name.includes(c))) return \"Cargo\";\n        if (charter.some((c)=>name.includes(c))) return \"Charter\";\n        // Default to International for most airlines\n        return \"International\";\n    };\n    // Get IATA code mapping (basic implementation)\n    const getIataCode = (name)=>{\n        const iataMap = {\n            'American Airlines': 'AA',\n            'Delta Air Lines': 'DL',\n            'United Airlines': 'UA',\n            'British Airways': 'BA',\n            'Air France': 'AF',\n            'KLM Royal Dutch Airlines': 'KL',\n            'Lufthansa': 'LH',\n            'Singapore Airlines': 'SQ',\n            'Cathay Pacific': 'CX',\n            'Emirates': 'EK',\n            'Qatar Airways': 'QR',\n            'All Nippon Airways': 'NH',\n            'Japan Airlines': 'JL',\n            'Air Canada': 'AC',\n            'Virgin Atlantic': 'VS',\n            'Turkish Airlines': 'TK',\n            'Swiss International Air Lines': 'LX',\n            'Austrian Airlines': 'OS',\n            'Brussels Airlines': 'SN',\n            'Scandinavian Airlines': 'SK',\n            'Finnair': 'AY',\n            'Iberia': 'IB',\n            'Aer Lingus': 'EI',\n            'TAP Air Portugal': 'TP',\n            'LOT Polish Airlines': 'LO',\n            'Czech Airlines': 'OK',\n            'Croatia Airlines': 'OU',\n            'Air China': 'CA',\n            'China Eastern Airlines': 'MU',\n            'China Southern Airlines': 'CZ',\n            'Korean Air': 'KE',\n            'Asiana Airlines': 'OZ',\n            'Thai Airways': 'TG',\n            'Malaysia Airlines': 'MH',\n            'Garuda Indonesia': 'GA',\n            'Philippine Airlines': 'PR',\n            'Vietnam Airlines': 'VN',\n            'Air India': 'AI',\n            'Ethiopian Airlines': 'ET',\n            'Kenya Airways': 'KQ',\n            'South African Airways': 'SA',\n            'EgyptAir': 'MS',\n            'Royal Air Maroc': 'AT',\n            'Royal Jordanian': 'RJ',\n            'Middle East Airlines': 'ME',\n            'Saudia': 'SV',\n            'Etihad Airways': 'EY',\n            'Oman Air': 'WY',\n            'Kuwait Airways': 'KU',\n            'JetBlue Airways': 'B6',\n            'Alaska Airlines': 'AS',\n            'Hawaiian Airlines': 'HA',\n            'Southwest Airlines': 'WN',\n            'Frontier Airlines': 'F9',\n            'Spirit Airlines': 'NK',\n            'Allegiant Air': 'G4',\n            'Sun Country Airlines': 'SY',\n            'Qantas': 'QF',\n            'Virgin Australia': 'VA',\n            'Air New Zealand': 'NZ',\n            'Avianca': 'AV',\n            'LATAM Airlines': 'LA',\n            'Copa Airlines': 'CM',\n            'Aeromexico': 'AM',\n            'WestJet': 'WS'\n        };\n        return iataMap[name];\n    };\n    // Find the preferred partner (prioritize Direct > Alliance > Bilateral)\n    const sortedPartners = [\n        ...amexResult.partnerPrograms\n    ].sort((a, b)=>{\n        const priority = {\n            'Direct': 0,\n            'Alliance': 1,\n            'Bilateral': 2\n        };\n        return priority[a.relationship] - priority[b.relationship];\n    });\n    const preferredPartner = sortedPartners[0];\n    const isDirectPartner = preferredPartner.relationship === 'Direct';\n    // Generate how-to-book steps based on the partner type\n    const generateBookingSteps = (partnerName, relationship, airlineName)=>{\n        const baseSteps = [\n            \"Transfer Amex points to \".concat(partnerName, \" at \").concat(preferredPartner.transferRatio, \" ratio\"),\n            \"Wait for transfer to complete (\".concat(preferredPartner.transferTime, \")\"),\n            \"Log into your \".concat(partnerName, \" account\")\n        ];\n        if (relationship === 'Direct') {\n            return [\n                ...baseSteps,\n                \"Search for \".concat(airlineName, \" flights on the \").concat(partnerName, \" website\"),\n                \"Book using points and pay any taxes/fees with cash\"\n            ];\n        } else if (relationship === 'Alliance') {\n            return [\n                ...baseSteps,\n                \"Search for \".concat(airlineName, \" flights (alliance partner) on the \").concat(partnerName, \" website\"),\n                \"Book the award ticket using points\",\n                \"Pay taxes and fees with cash (may be higher for partner awards)\"\n            ];\n        } else {\n            return [\n                ...baseSteps,\n                \"Search for \".concat(airlineName, \" flights on the \").concat(partnerName, \" website\"),\n                \"Look for partner award availability (may be limited)\",\n                \"Book using points and pay taxes/fees with cash\"\n            ];\n        }\n    };\n    // Generate notes based on common patterns\n    const generateNotes = (partnerName, relationship)=>{\n        const notes = [];\n        if (relationship === 'Alliance') {\n            notes.push(\"Alliance partner bookings may have limited award availability\");\n            notes.push(\"Expect higher taxes and fees compared to direct partner bookings\");\n        }\n        if (relationship === 'Bilateral') {\n            notes.push(\"Bilateral partnership may have restricted routes and availability\");\n        }\n        if (partnerName.includes('British Airways')) {\n            notes.push(\"British Airways uses distance-based pricing - excellent for short flights\");\n            notes.push(\"Low taxes and fees on domestic US flights\");\n        }\n        if (partnerName.includes('Air France') || partnerName.includes('KLM')) {\n            notes.push(\"Flying Blue has dynamic pricing - book early for better rates\");\n        }\n        if (partnerName.includes('Singapore Airlines')) {\n            notes.push(\"KrisFlyer has excellent premium cabin availability\");\n        }\n        if (notes.length === 0) {\n            notes.push(\"Book well in advance for better award availability\");\n        }\n        return notes;\n    };\n    const bookableVia = amexResult.partnerPrograms.map((p)=>p.partnerName);\n    const partnerDetails = amexResult.partnerPrograms.map((p)=>({\n            name: p.partnerName,\n            relationship: p.relationship,\n            transferRatio: p.transferRatio,\n            transferTime: p.transferTime\n        }));\n    const notes = generateNotes(preferredPartner.partnerName, preferredPartner.relationship);\n    // Generate comparative recommendation reasons based on available alternatives\n    const generateRecommendationReasons = (airlineName, preferredPartner, allPartners)=>{\n        const reasons = [];\n        const otherPartners = allPartners.filter((p)=>p.name !== preferredPartner);\n        // Get partner program types for comparison\n        const hasAviosPrograms = allPartners.some((p)=>p.name.includes('British Airways') || p.name.includes('Aer Lingus') || p.name.includes('Iberia') || p.name.includes('Cathay Pacific') || p.name.includes('Qantas'));\n        const hasSkyTeamPrograms = allPartners.some((p)=>p.name.includes('Air France') || p.name.includes('KLM') || p.name.includes('Delta') || p.name.includes('Virgin Atlantic') || p.name.includes('Aeromexico'));\n        const hasStarAlliancePrograms = allPartners.some((p)=>p.name.includes('Air Canada') || p.name.includes('Singapore Airlines') || p.name.includes('All Nippon Airways') || p.name.includes('Avianca'));\n        // Airline-specific comparative logic\n        // Royal Air Maroc (Oneworld member)\n        if (airlineName.includes('Royal Air Maroc')) {\n            if (preferredPartner.includes('Aer Lingus') && hasAviosPrograms) {\n                reasons.push(\"British Airways charges high fuel surcharges on Royal Air Maroc flights, while Aer Lingus typically has lower taxes\");\n                reasons.push(\"Aer Lingus may price some mid-haul Royal Air Maroc routes cheaper than British Airways' distance-based chart\");\n                if (otherPartners.some((p)=>p.name.includes('Cathay Pacific'))) {\n                    reasons.push(\"Better availability than Cathay Pacific for Africa-bound flights from Europe/US\");\n                }\n            }\n            if (preferredPartner.includes('British Airways') && hasAviosPrograms) {\n                reasons.push(\"Distance-based pricing can be excellent for short Royal Air Maroc flights\");\n                reasons.push(\"More predictable award pricing than other Avios programs\");\n            }\n        }\n        // American Airlines (if bookable through partners)\n        if (airlineName.includes('American Airlines')) {\n            if (preferredPartner.includes('British Airways')) {\n                reasons.push(\"British Airways offers better domestic US award pricing than most other Avios programs\");\n                reasons.push(\"Lower fuel surcharges on American Airlines flights compared to international partners\");\n            }\n            if (preferredPartner.includes('Cathay Pacific')) {\n                reasons.push(\"Often better award availability than British Airways for American Airlines flights\");\n                reasons.push(\"More generous routing rules for complex itineraries\");\n            }\n        }\n        // Delta Air Lines (SkyTeam)\n        if (airlineName.includes('Delta')) {\n            if (preferredPartner.includes('Air France') || preferredPartner.includes('KLM')) {\n                reasons.push(\"Flying Blue often has better award pricing than Virgin Atlantic for Delta flights\");\n                reasons.push(\"More predictable award availability than Virgin Atlantic's limited Delta access\");\n            }\n            if (preferredPartner.includes('Virgin Atlantic')) {\n                reasons.push(\"Virgin Atlantic offers unique Delta award space not available through other partners\");\n                reasons.push(\"Better premium cabin availability on transatlantic Delta routes\");\n            }\n        }\n        // United Airlines (Star Alliance)\n        if (airlineName.includes('United')) {\n            if (preferredPartner.includes('Air Canada')) {\n                reasons.push(\"Aeroplan often has better award pricing than Singapore Airlines for North America routes\");\n                reasons.push(\"More generous stopover rules than other Star Alliance programs\");\n            }\n            if (preferredPartner.includes('Singapore Airlines')) {\n                reasons.push(\"KrisFlyer typically has better premium cabin availability than other Star Alliance partners\");\n                reasons.push(\"More consistent award space release than Aeroplan\");\n            }\n            if (preferredPartner.includes('Avianca')) {\n                reasons.push(\"LifeMiles charges no fuel surcharges on United flights, unlike some other Star Alliance partners\");\n                reasons.push(\"Often better award pricing for complex routing\");\n            }\n        }\n        // British Airways (Oneworld)\n        if (airlineName.includes('British Airways')) {\n            if (preferredPartner.includes('Aer Lingus')) {\n                reasons.push(\"Aer Lingus charges significantly lower fuel surcharges than other Avios programs on British Airways flights\");\n                reasons.push(\"Better award pricing for transatlantic British Airways routes\");\n            }\n            if (preferredPartner.includes('Cathay Pacific')) {\n                reasons.push(\"Asia Miles often has better premium cabin availability than Avios programs\");\n                reasons.push(\"Lower fuel surcharges on British Airways long-haul flights\");\n            }\n        }\n        // Air France/KLM (SkyTeam)\n        if (airlineName.includes('Air France') || airlineName.includes('KLM')) {\n            if (preferredPartner.includes('Air France') || preferredPartner.includes('KLM')) {\n                reasons.push(\"Flying Blue offers the best award availability on Air France/KLM flights as the home program\");\n                reasons.push(\"Lower taxes and fees compared to partner program bookings\");\n            }\n            if (preferredPartner.includes('Virgin Atlantic')) {\n                reasons.push(\"Virgin Atlantic sometimes offers better premium cabin space than Flying Blue\");\n                reasons.push(\"Unique award space not available through other SkyTeam partners\");\n            }\n        }\n        // Lufthansa Group (Star Alliance)\n        if (airlineName.includes('Lufthansa') || airlineName.includes('Swiss') || airlineName.includes('Austrian')) {\n            if (preferredPartner.includes('Air Canada')) {\n                reasons.push(\"Aeroplan has better award availability on Lufthansa Group airlines than most Star Alliance partners\");\n                reasons.push(\"Lower fuel surcharges than booking through Singapore Airlines\");\n            }\n            if (preferredPartner.includes('Avianca')) {\n                reasons.push(\"LifeMiles charges no fuel surcharges on Lufthansa Group flights\");\n                reasons.push(\"Often significantly cheaper than other Star Alliance programs for European routes\");\n            }\n        }\n        // Japan Airlines (Oneworld)\n        if (airlineName.includes('Japan Airlines') || airlineName.includes('JAL')) {\n            if (preferredPartner.includes('Cathay Pacific')) {\n                reasons.push(\"Asia Miles typically has better Japan Airlines availability than Avios programs\");\n                reasons.push(\"Lower fuel surcharges on Japan Airlines flights compared to British Airways\");\n            }\n            if (preferredPartner.includes('British Airways')) {\n                reasons.push(\"Distance-based pricing can be excellent for short Japan domestic flights\");\n                reasons.push(\"More predictable award pricing than other Oneworld partners\");\n            }\n        }\n        // Singapore Airlines (Star Alliance)\n        if (airlineName.includes('Singapore Airlines')) {\n            if (preferredPartner.includes('Singapore Airlines')) {\n                reasons.push(\"KrisFlyer offers the best Singapore Airlines award availability as the home program\");\n                reasons.push(\"Access to Suites and premium cabin space not released to partners\");\n            }\n            if (preferredPartner.includes('Air Canada')) {\n                reasons.push(\"Aeroplan sometimes offers better award pricing than KrisFlyer for Singapore Airlines\");\n                reasons.push(\"More flexible routing and stopover options\");\n            }\n        }\n        // Emirates (Independent)\n        if (airlineName.includes('Emirates')) {\n            if (preferredPartner.includes('Emirates')) {\n                reasons.push(\"Emirates Skywards offers the best Emirates award availability as the home program\");\n                reasons.push(\"Access to First Class and premium cabin space not available through partners\");\n            }\n        }\n        // Add fallback comparative reasons if no specific ones generated\n        if (reasons.length === 0) {\n            const preferredPartnerObj = allPartners.find((p)=>p.name === preferredPartner);\n            if ((preferredPartnerObj === null || preferredPartnerObj === void 0 ? void 0 : preferredPartnerObj.relationship) === 'Direct') {\n                reasons.push(\"Direct transfer partner typically offers better award availability than alliance partners\");\n                reasons.push(\"Home program access to award space not released to other partners\");\n            } else if (otherPartners.length > 0) {\n                reasons.push(\"Generally offers better award pricing than other available transfer options\");\n                reasons.push(\"More consistent award availability for this airline\");\n            }\n        }\n        return reasons;\n    };\n    const recommendationReasons = generateRecommendationReasons(airlineName, preferredPartner.partnerName, amexResult.partnerPrograms.map((p)=>({\n            name: p.partnerName,\n            relationship: p.relationship\n        })));\n    return {\n        name: airlineName,\n        iataCode: getIataCode(airlineName),\n        category: getAirlineCategory(airlineName),\n        isDirectPartner,\n        isAllianceBookable: amexResult.partnerPrograms.some((p)=>p.relationship === 'Alliance'),\n        isBilateralBookable: amexResult.partnerPrograms.some((p)=>p.relationship === 'Bilateral'),\n        bookableVia,\n        partnerDetails,\n        preferredPartner: preferredPartner.partnerName,\n        transferRatio: preferredPartner.transferRatio,\n        transferTime: preferredPartner.transferTime,\n        howToBookSteps: generateBookingSteps(preferredPartner.partnerName, preferredPartner.relationship, airlineName),\n        notes,\n        recommendationReasons: recommendationReasons.length > 0 ? recommendationReasons : undefined\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/airline-data-converter.ts\n"));

/***/ })

});